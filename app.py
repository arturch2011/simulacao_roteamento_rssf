import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from streamlit_plotly_events import plotly_events
from network_generator import (
    criar_grafo_rssf,
    criar_grafo_aleatorio,
    criar_grafo_barabasi_albert,
    criar_grafo_watts_strogatz
)
from simulation import executar_simulacao
from visualization import plotar_rede, plotar_metricas, plotar_comparacao_betweenness, plotar_metricas_interativo, plotar_comparacao_betweenness_interativo, plotar_rede_com_pontos_criticos

st.set_page_config(layout="wide", page_title="Simulador RSSF")

# Configura√ß√µes de performance
if 'performance_mode' not in st.session_state:
    st.session_state['performance_mode'] = True  # Modo performance ativado por padr√£o

st.title("Simulador de Roteamento em Redes Complexas")

# --- Fun√ß√µes Auxiliares ---
@st.cache_data(ttl=300)  # Cache por 5 minutos
def calcular_metricas_cached(grafo_edges, grafo_nodes, tempo_simulacao):
    """Fun√ß√£o auxiliar para cache das m√©tricas computacionalmente caras."""
    import networkx as nx
    # Recriar o grafo a partir dos dados
    G = nx.Graph()
    G.add_edges_from(grafo_edges)
    for node, data in grafo_nodes:
        G.add_node(node, **data)
    
    return executar_simulacao(G, tempo_simulacao)

def rodar_simulacao(G, tempo_simulacao):
    """Executa a simula√ß√£o e armazena os resultados no estado da sess√£o."""
    with st.spinner("Executando a simula√ß√£o..."):
        # Converter grafo para formato serializ√°vel para cache
        grafo_edges = list(G.edges())
        grafo_nodes = [(node, data) for node, data in G.nodes(data=True)]
        
        metricas = calcular_metricas_cached(grafo_edges, grafo_nodes, tempo_simulacao)
        st.session_state['resultados'] = {
            'G': G,
            'metricas': metricas
        }

# --- Barra Lateral de Configura√ß√£o ---
st.sidebar.header("Par√¢metros da Simula√ß√£o")

# Controle de performance
with st.sidebar.expander("‚öôÔ∏è Configura√ß√µes de Performance"):
    performance_mode = st.checkbox("Modo Performance", value=st.session_state.get('performance_mode', True),
                                 help="Reduz complexidade dos gr√°ficos para melhor performance")
    st.session_state['performance_mode'] = performance_mode
    
    if performance_mode:
        st.info("‚úÖ Gr√°ficos otimizados ativos")
    else:
        st.warning("‚ö†Ô∏è Modo completo pode ser mais lento")
    
    if st.button("üîÑ Limpar Cache"):
        st.cache_data.clear()
        st.success("Cache limpo! Recarregue a p√°gina se necess√°rio.")

tipo_rede_map = {
    "RSSF (Proximidade)": "rssf",
    "Aleat√≥ria (Erdos-Reny)": "aleatoria",
    "Barab√°si-Albert (Preferential Attachment)": "barabasi_albert",
    "Watts-Strogatz (Small-World)": "watts_strogatz",
}

tipo_rede_selecionado = st.sidebar.selectbox(
    "Selecione o Tipo de Rede",
    options=list(tipo_rede_map.keys())
)

# Par√¢metros comuns
num_nos = st.sidebar.slider("N√∫mero de N√≥s", 5, 500, 100)
tam_area = st.sidebar.slider("Tamanho da √Årea", 50, 200, 100)
num_estacoes_base = st.sidebar.slider("N√∫mero de Esta√ß√µes Base", 0, 10, 1)
tempo_simulacao = st.sidebar.slider("Tempo de Simula√ß√£o", 0, 500, 100)

params = {}

# Par√¢metros espec√≠ficos do tipo de rede
if tipo_rede_map[tipo_rede_selecionado] == 'rssf':
    params['raio_comunicacao'] = st.sidebar.slider("Raio de Comunica√ß√£o", 5, 50, 20)
elif tipo_rede_map[tipo_rede_selecionado] == 'aleatoria':
    params['p_conexao'] = st.sidebar.slider("Probabilidade de Conex√£o (p)", 0.0, 1.0, 0.1, 0.01)
elif tipo_rede_map[tipo_rede_selecionado] == 'barabasi_albert':
    params['m_conexoes'] = st.sidebar.slider("Conex√µes para Novos N√≥s (m)", 1, 10, 2)
elif tipo_rede_map[tipo_rede_selecionado] == 'watts_strogatz':
    params['k_vizinhos'] = st.sidebar.slider("N√∫mero de Vizinhos (k)", 1, 20, 4)
    params['p_reconectar'] = st.sidebar.slider("Probabilidade de Reconex√£o (p)", 0.0, 1.0, 0.1, 0.01)

# Bot√£o para iniciar a simula√ß√£o
if st.sidebar.button("Iniciar Nova Simula√ß√£o"):
    with st.spinner("Criando a rede..."):
        G = None
        tipo_rede = tipo_rede_map[tipo_rede_selecionado]
        
        if tipo_rede == 'rssf':
            G = criar_grafo_rssf(num_nos, tam_area, params['raio_comunicacao'], num_estacoes_base)
        elif tipo_rede == 'aleatoria':
            G = criar_grafo_aleatorio(num_nos, params['p_conexao'], tam_area, num_estacoes_base)
        elif tipo_rede == 'barabasi_albert':
            G = criar_grafo_barabasi_albert(num_nos, params['m_conexoes'], tam_area, num_estacoes_base)
        elif tipo_rede == 'watts_strogatz':
            G = criar_grafo_watts_strogatz(num_nos, params['k_vizinhos'], params['p_reconectar'], tam_area, num_estacoes_base)

        rodar_simulacao(G, tempo_simulacao)
        st.session_state['no_selecionado'] = None # Limpa a sele√ß√£o de n√≥

# --- Exibi√ß√£o dos Resultados ---
st.header("Resultados da Simula√ß√£o")

if 'resultados' in st.session_state:
    resultados = st.session_state['resultados']
    G = resultados['G']
    metricas = resultados['metricas']

    col1, col2 = st.columns([1, 2])

    with col2:
        st.subheader("Visualiza√ß√£o da Rede")
        
        # Abas para diferentes visualiza√ß√µes
        tab1, tab2 = st.tabs(["Rede Normal", "An√°lise de Robustez"])
        
        with tab1:
            fig_rede = plotar_rede(G)
            # Usa plotly_events para capturar cliques
            selected_points = plotly_events(fig_rede, click_event=True, hover_event=False, select_event=False, key="rede_normal")

            if selected_points:
                # Pega o √≠ndice do ponto clicado
                point_index = selected_points[0]['pointIndex']
                # Obt√©m a lista de n√≥s na mesma ordem que no gr√°fico
                nodes_list = list(G.nodes())
                # Pega o ID do n√≥ usando o √≠ndice
                node_id = nodes_list[point_index]
                st.session_state['no_selecionado'] = node_id
        
        with tab2:
            # S√≥ mostrar se houver pontos cr√≠ticos para evitar processamento desnecess√°rio
            if metricas.get('pontos_articulacao') or metricas.get('pontes'):
                fig_robustez = plotar_rede_com_pontos_criticos(G, metricas)
                st.plotly_chart(fig_robustez, use_container_width=True, key="robustez")
                
                # Informa√ß√µes sobre robustez
                col_info1, col_info2 = st.columns(2)
                with col_info1:
                    if metricas.get('pontos_articulacao'):
                        st.error(f"‚ö†Ô∏è {len(metricas['pontos_articulacao'])} pontos cr√≠ticos encontrados")
                        st.write("**N√≥s cr√≠ticos:**", metricas['pontos_articulacao'])
                with col_info2:
                    if metricas.get('pontes'):
                        st.error(f"‚ö†Ô∏è {len(metricas['pontes'])} pontes cr√≠ticas encontradas")
                        pontes_str = [f"{u}-{v}" for u, v in metricas['pontes']]
                        st.write("**Enlaces cr√≠ticos:**", pontes_str)
            else:
                st.success("‚úÖ Rede robusta - sem pontos √∫nicos de falha!")
                st.info("Esta rede n√£o possui pontos de articula√ß√£o ou pontes cr√≠ticas.")
                
                # Mostrar rede normal se n√£o h√° pontos cr√≠ticos
                fig_rede_backup = plotar_rede(G)
                st.plotly_chart(fig_rede_backup, use_container_width=True, key="robustez_backup")


    with col1:
        st.subheader("M√©tricas de Desempenho")
        if metricas.get('pacotes_gerados', 0) > 0:
            taxa_entrega = (metricas.get('pacotes_entregues', 0) / metricas['pacotes_gerados']) * 100
            st.metric("Taxa de Entrega", f"{taxa_entrega:.2f}%")
            latencia_media = sum(metricas.get('latencias', [0])) / len(metricas.get('latencias', [1]))
            st.metric("Lat√™ncia M√©dia", f"{latencia_media:.2f}s")
            saltos_medios = sum(metricas.get('contagens_de_saltos', [0])) / len(metricas.get('contagens_de_saltos', [1]))
            st.metric("M√©dia de Saltos", f"{saltos_medios:.2f}")
        else:
            st.info("A simula√ß√£o de pacotes n√£o foi executada.")
        
        st.subheader("M√©tricas da Rede")
        
        # M√©tricas b√°sicas
        col_m1, col_m2, col_m3 = st.columns(3)
        with col_m1:
            st.metric("Ordem (N√≥s)", f"{metricas.get('ordem', 'N/A')}")
            st.metric("Tamanho (Arestas)", f"{metricas.get('tamanho', 'N/A')}")
        with col_m2:
            st.metric("Di√¢metro da Rede", f"{metricas.get('diametro_rede', 'N/A')}")
            if metricas.get('distancia_media'):
                st.metric("Dist√¢ncia M√©dia", f"{metricas.get('distancia_media', 'N/A'):.2f}")
            else:
                st.metric("Dist√¢ncia M√©dia", "N/A")
        with col_m3:
            if metricas.get('coeficiente_clusterizacao') is not None:
                st.metric("Coef. Clusteriza√ß√£o", f"{metricas.get('coeficiente_clusterizacao', 0):.3f}")
            else:
                st.metric("Coef. Clusteriza√ß√£o", "N/A")
            if metricas.get('assortatividade') is not None:
                st.metric("Assortatividade", f"{metricas.get('assortatividade', 0):.3f}")
            else:
                st.metric("Assortatividade", "N/A")
        
        # M√©tricas de comunidade
        col_m4, col_m5 = st.columns(2)
        with col_m4:
            if metricas.get('modularidade') is not None:
                st.metric("Modularidade", f"{metricas.get('modularidade', 0):.3f}")
            else:
                st.metric("Modularidade", "N/A")
        with col_m5:
            st.metric("N¬∫ Comunidades", f"{metricas.get('numero_comunidades', 'N/A')}")
        
        # M√©tricas de robustez e conectividade
        st.subheader("M√©tricas de Robustez")
        col_r1, col_r2, col_r3 = st.columns(3)
        with col_r1:
            st.metric("Edge Connectivity", f"{metricas.get('edge_connectivity', 'N/A')}")
            st.metric("Node Connectivity", f"{metricas.get('node_connectivity', 'N/A')}")
        with col_r2:
            st.metric("Pontos de Articula√ß√£o", f"{metricas.get('numero_pontos_articulacao', 'N/A')}")
            st.metric("Pontes Cr√≠ticas", f"{metricas.get('numero_pontes', 'N/A')}")
        with col_r3:
            # Avaliar robustez geral
            if metricas.get('edge_connectivity', 0) >= 2:
                st.success("üü¢ Rede Robusta")
            elif metricas.get('edge_connectivity', 0) == 1:
                st.warning("üü° Rede Vulner√°vel")
            else:
                st.error("üî¥ Rede Fragmentada")
        
        # Mostrar n√≥s cr√≠ticos se existirem
        if metricas.get('pontos_articulacao'):
            st.warning(f"‚ö†Ô∏è N√≥s Cr√≠ticos (Pontos de Articula√ß√£o): {metricas['pontos_articulacao']}")
        
        if metricas.get('pontes'):
            pontes_str = [f"({u}-{v})" for u, v in metricas['pontes']]
            st.warning(f"‚ö†Ô∏è Arestas Cr√≠ticas (Pontes): {pontes_str}")
        
        if not metricas.get('is_connected', True):
            st.warning("‚ö†Ô∏è A rede n√£o est√° totalmente conectada.")
        
        # Explica√ß√µes das m√©tricas
        with st.expander("üìñ Explica√ß√£o das M√©tricas de Rede"):
            st.markdown("""
            ### M√©tricas Fundamentais de Redes de Sensores Sem Fio (RSSF)
            
            **üî¢ Ordem e Tamanho:**
            - **Ordem**: N√∫mero total de n√≥s (sensores + esta√ß√µes base) na rede
            - **Tamanho**: N√∫mero total de conex√µes (enlaces de comunica√ß√£o) entre os n√≥s
            - *Relev√¢ncia*: Determinam a capacidade e complexidade computacional da rede
            
            **üìè M√©tricas de Dist√¢ncia:**
            - **Di√¢metro**: Maior dist√¢ncia (em saltos) entre qualquer par de n√≥s conectados
            - **Dist√¢ncia M√©dia**: M√©dia de todas as dist√¢ncias mais curtas entre pares de n√≥s
            - *Relev√¢ncia*: Afetam diretamente lat√™ncia e consumo energ√©tico nas comunica√ß√µes
            
            **üîó Coeficiente de Clusteriza√ß√£o:**
            - Mede qu√£o densamente conectados est√£o os vizinhos de cada n√≥ (0 a 1)
            - *Relev√¢ncia*: Valores altos indicam redund√¢ncia de caminhos e maior toler√¢ncia a falhas
            
            **üèòÔ∏è Modularidade:**
            - Identifica grupos/comunidades de n√≥s densamente conectados (-1 a 1)
            - *Relev√¢ncia*: √ötil para otimiza√ß√£o energ√©tica atrav√©s de protocolos hier√°rquicos
            
            **‚öñÔ∏è Assortatividade:**
            - Tend√™ncia de n√≥s com grau similar se conectarem (-1 a 1)
            - *Positiva*: N√≥s populares conectam-se entre si (redes sociais)
            - *Negativa*: N√≥s populares conectam-se a n√≥s com poucos vizinhos (redes tecnol√≥gicas)
            - *Relev√¢ncia*: Influencia robustez contra falhas de n√≥s importantes
            
            **üõ°Ô∏è M√©tricas de Robustez:**
            - **Edge Connectivity**: N√∫mero m√≠nimo de enlaces que devem falhar para fragmentar a rede
            - **Node Connectivity**: N√∫mero m√≠nimo de n√≥s que devem falhar para fragmentar a rede
            - **Pontos de Articula√ß√£o**: N√≥s √∫nicos cuja falha desconecta a rede
            - **Pontes**: Enlaces √∫nicos cuja falha desconecta a rede
            - *Relev√¢ncia*: Critiais para toler√¢ncia a falhas e manuten√ß√£o da conectividade
            
            ### üéØ Interpreta√ß√£o para RSSF:
            - **Di√¢metro baixo**: Comunica√ß√£o mais r√°pida e eficiente
            - **Alta clusteriza√ß√£o**: Maior redund√¢ncia e toler√¢ncia a falhas
            - **Modularidade alta**: Oportunidades para protocolos de agrega√ß√£o de dados
            - **Assortatividade negativa**: T√≠pica de redes bem distribu√≠das espacialmente
            - **Alta conectividade**: Rede mais robusta contra falhas de n√≥s/enlaces
            - **Poucos pontos de articula√ß√£o**: Menor vulnerabilidade a falhas cr√≠ticas
            """)
        
        # An√°lise detalhada de robustez
        with st.expander("üõ°Ô∏è An√°lise Detalhada de Robustez"):
            st.markdown("""
            ### Interpreta√ß√£o das M√©tricas de Robustez
            
            **üîó Edge Connectivity:**
            - **Valor ‚â• 2**: Rede robusta, m√∫ltiplos caminhos alternativos
            - **Valor = 1**: Rede vulner√°vel, existe pelo menos uma ponte cr√≠tica
            - **Valor = 0**: Rede j√° fragmentada ou com apenas um n√≥
            
            **üë• Node Connectivity:**
            - **Valor ‚â• 2**: N√£o h√° pontos √∫nicos de falha
            - **Valor = 1**: Existe pelo menos um ponto de articula√ß√£o
            - **Valor = 0**: Rede j√° fragmentada
            
            **‚ö†Ô∏è Pontos de Articula√ß√£o:**
            - N√≥s cuja remo√ß√£o aumenta o n√∫mero de componentes conectados
            - Em RSSF: n√≥s cr√≠ticos para manter conectividade global
            - **Estrat√©gia**: Adicionar redund√¢ncia ao redor destes n√≥s
            
            **üåâ Pontes:**
            - Enlaces cuja remo√ß√£o aumenta o n√∫mero de componentes conectados
            - Em RSSF: enlaces cr√≠ticos que devem ser protegidos
            - **Estrat√©gia**: Adicionar enlaces alternativos
            
            ### üéØ Recomenda√ß√µes para RSSF:
            - **Monitorar** pontos de articula√ß√£o com maior frequ√™ncia
            - **Backup**: Ter planos de roteamento alternativos
            - **Deployment**: Evitar topologias com muitos pontos cr√≠ticos
            - **Manuten√ß√£o**: Priorizar reparo de n√≥s/enlaces cr√≠ticos
            """)
        

        # --- Interatividade com o Grafo ---
        st.subheader("N√≥ Selecionado")
        
        no_selecionado = st.session_state.get('no_selecionado')

        if no_selecionado is not None:
            st.write(f"**Informa√ß√µes Detalhadas do N√≥ {no_selecionado}:**")
            
            # Informa√ß√µes b√°sicas do n√≥
            node_data = G.nodes[no_selecionado]
            
            col_info1, col_info2 = st.columns(2)
            
            with col_info1:
                st.write("**Dados B√°sicos:**")
                st.json(node_data)
                
                # M√©tricas b√°sicas do n√≥
                grau = G.degree(no_selecionado)
                vizinhos = list(G.neighbors(no_selecionado))
                st.metric("Grau do N√≥", grau)
                st.write(f"**Vizinhos:** {vizinhos}")
            
            with col_info2:
                st.write("**M√©tricas de Centralidade:**")
                
                # M√©tricas de centralidade espec√≠ficas do n√≥
                centralidades = {}
                if metricas.get('centralidade_de_grau'):
                    centralidades['Grau'] = f"{metricas['centralidade_de_grau'].get(no_selecionado, 0):.4f}"
                if metricas.get('centralidade_de_intermediacao'):
                    centralidades['Intermedia√ß√£o'] = f"{metricas['centralidade_de_intermediacao'].get(no_selecionado, 0):.4f}"
                if metricas.get('centralidade_de_proximidade'):
                    centralidades['Proximidade'] = f"{metricas['centralidade_de_proximidade'].get(no_selecionado, 0):.4f}"
                if metricas.get('centralidade_de_pagerank'):
                    centralidades['PageRank'] = f"{metricas['centralidade_de_pagerank'].get(no_selecionado, 0):.4f}"
                if metricas.get('centralidade_de_clique'):
                    centralidades['Clustering'] = f"{metricas['centralidade_de_clique'].get(no_selecionado, 0):.4f}"
                
                # M√©tricas espec√≠ficas de RSSF
                if metricas.get('betweenness_sensores_para_bases'):
                    centralidades['Betweenness S‚ÜíB'] = f"{metricas['betweenness_sensores_para_bases'].get(no_selecionado, 0):.4f}"
                if metricas.get('betweenness_bases_para_sensores'):
                    centralidades['Betweenness B‚ÜíS'] = f"{metricas['betweenness_bases_para_sensores'].get(no_selecionado, 0):.4f}"
                
                # M√©tricas de simula√ß√£o
                if metricas.get('contagens_de_encaminhamento'):
                    centralidades['Encaminhamentos'] = f"{metricas['contagens_de_encaminhamento'].get(no_selecionado, 0)}"
                
                # Informa√ß√µes de robustez do n√≥
                if metricas.get('pontos_articulacao') and no_selecionado in metricas['pontos_articulacao']:
                    st.error("‚ö†Ô∏è **PONTO DE ARTICULA√á√ÉO** - N√≥ cr√≠tico!")
                    st.write("Remover este n√≥ desconectar√° a rede.")
                
                for nome, valor in centralidades.items():
                    st.metric(nome, valor)

            if st.button(f"Remover N√≥ {no_selecionado} e Refazer Simula√ß√£o"):
                G.remove_node(no_selecionado)
                st.session_state['no_selecionado'] = None # Limpa a sele√ß√£o
                st.success(f"N√≥ {no_selecionado} removido.")
                rodar_simulacao(G, tempo_simulacao)
                st.rerun() # For√ßa a atualiza√ß√£o da UI
        else:
            st.info("Clique em um n√≥ no grafo para ver suas informa√ß√µes detalhadas.")


    st.subheader("Gr√°ficos Interativos de M√©tricas da Simula√ß√£o")
    
    if st.session_state.get('performance_mode', True):
        # Modo otimizado
        fig_metricas_interativo = plotar_metricas_interativo(metricas)
        st.plotly_chart(fig_metricas_interativo, use_container_width=True)
        
        st.subheader("An√°lise de Betweenness Centrality")
        fig_betweenness_interativo = plotar_comparacao_betweenness_interativo(metricas)
        st.plotly_chart(fig_betweenness_interativo, use_container_width=True)
    else:
        # Modo completo (pode ser mais lento)
        col_graf1, col_graf2 = st.columns(2)
        with col_graf1:
            fig_metricas_interativo = plotar_metricas_interativo(metricas)
            st.plotly_chart(fig_metricas_interativo, use_container_width=True)
        with col_graf2:
            fig_betweenness_interativo = plotar_comparacao_betweenness_interativo(metricas)
            st.plotly_chart(fig_betweenness_interativo, use_container_width=True)
    
    # Gr√°ficos est√°ticos sempre em expander para n√£o sobrecarregar
    with st.expander("üìä Gr√°ficos Est√°ticos Detalhados"):
        col_est1, col_est2 = st.columns(2)
        with col_est1:
            st.subheader("M√©tricas da Simula√ß√£o")
            fig_metricas = plotar_metricas(metricas)
            st.pyplot(fig_metricas)
        with col_est2:
            st.subheader("Betweenness Centrality")
            fig_betweenness = plotar_comparacao_betweenness(metricas)
            st.pyplot(fig_betweenness)

    st.subheader("An√°lise de Centralidade e N√≥s Importantes")
    
    def criar_df_centralidade(metrica, nome_coluna):
        if not metrica:
            return pd.DataFrame(columns=['N√≥', nome_coluna])
        df = pd.DataFrame(list(metrica.items()), columns=['N√≥', nome_coluna])
        df = df.sort_values(by=nome_coluna, ascending=False).reset_index(drop=True)
        df['N√≥'] = df['N√≥'].astype(str)
        return df.head(10)

    df_grau = criar_df_centralidade(metricas.get('centralidade_de_grau', {}), 'Centralidade de Grau')
    df_intermediacao = criar_df_centralidade(metricas.get('centralidade_de_intermediacao', {}), 'Centralidade de Intermedia√ß√£o')
    df_proximidade = criar_df_centralidade(metricas.get('centralidade_de_proximidade', {}), 'Centralidade de Proximidade')
    df_gargalos = criar_df_centralidade(metricas.get('contagens_de_encaminhamento', {}), 'Contagem de Encaminhamentos')
    
    # Novas m√©tricas de betweenness espec√≠ficas para RSSF
    df_betweenness_up = criar_df_centralidade(metricas.get('betweenness_sensores_para_bases', {}), 'Betweenness Sensores‚ÜíBases')
    df_betweenness_down = criar_df_centralidade(metricas.get('betweenness_bases_para_sensores', {}), 'Betweenness Bases‚ÜíSensores')

    c1, c2 = st.columns(2)
    with c1:
        st.write("**Top 10 - Grau**")
        st.dataframe(df_grau)
        st.write("**Top 10 - Proximidade**")
        st.dataframe(df_proximidade)
        st.write("**Top 10 - Betweenness Sensores‚ÜíBases**")
        st.dataframe(df_betweenness_up)
    with c2:
        st.write("**Top 10 - Intermedia√ß√£o (Geral)**")
        st.dataframe(df_intermediacao)
        st.write("**Top 10 - N√≥s de Gargalo**")
        st.dataframe(df_gargalos)
        st.write("**Top 10 - Betweenness Bases‚ÜíSensores**")
        st.dataframe(df_betweenness_down)
    
    # Explica√ß√£o das m√©tricas de betweenness espec√≠ficas
    with st.expander("üì° Betweenness Centrality Espec√≠fico para RSSF"):
        st.markdown("""
        ### An√°lise de Intermedia√ß√£o Direcionada em RSSF
        
        **üì§ Betweenness Sensores ‚Üí Bases (Upload/Coleta):**
        - Identifica n√≥s cr√≠ticos no fluxo de dados dos sensores para as esta√ß√µes base
        - Representa o padr√£o t√≠pico de coleta de dados em RSSF
        - N√≥s com alta pontua√ß√£o s√£o gargalos cr√≠ticos para agrega√ß√£o de dados
        - *Impacto*: Falha destes n√≥s pode interromper a coleta de grandes √°reas da rede
        
        **üì• Betweenness Bases ‚Üí Sensores (Download/Comando):**
        - Identifica n√≥s cr√≠ticos no fluxo de comandos das bases para os sensores
        - Representa dissemina√ß√£o de comandos, atualiza√ß√µes ou consultas
        - N√≥s importantes para reconfigura√ß√£o da rede e dissemina√ß√£o de informa√ß√µes
        - *Impacto*: Falha destes n√≥s pode impedir controle remoto de regi√µes da rede
        
        **üéØ Interpreta√ß√£o Pr√°tica:**
        - **Valores altos em Upload**: N√≥s que agregam dados de muitos sensores
        - **Valores altos em Download**: N√≥s que distribuem comandos para muitos sensores
        - **N√≥s com ambos altos**: Pontos cr√≠ticos bidirecionais (maior risco)
        - **Otimiza√ß√£o**: Considere balanceamento de carga ou redund√¢ncia nestes n√≥s
        """)
    

else:
    st.info("Configure os par√¢metros na barra lateral e clique em 'Iniciar Nova Simula√ß√£o' para ver os resultados.")